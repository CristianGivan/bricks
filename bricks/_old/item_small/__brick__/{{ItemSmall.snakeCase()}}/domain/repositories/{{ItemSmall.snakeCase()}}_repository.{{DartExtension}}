import 'package:fo_fe/core/core_exports.dart';
import 'package:fo_fe/core/external_exports.dart';
import 'package:fo_fe/features/organizer/all_items/{{ItemSmall.snakeCase()}}/utils/{{ItemSmall.snakeCase()}}_exports.dart';
import 'package:fo_fe/features/organizer/all_items/user/utils/user_exports.dart';
import 'package:fo_fe/features/organizer/utils/organizer_exports.dart';

abstract class {{ItemSmall.pascalCase()}}Repository {
  // {{ItemSmall.pascalCase()}} CRUD operations
  Future<Either<Failure, {{ItemSmall.pascalCase()}}Entity>> add{{ItemSmall.pascalCase()}}({{ItemSmall.pascalCase()}}Entity {{ItemSmall.camelCase()}});

  Future<Either<Failure, OrganizerItems<{{ItemSmall.pascalCase()}}Entity>>> get{{ItemSmall.pascalCase()}}EntitiesFromUser(int userId);

  Future<Either<Failure, OrganizerItems<{{ItemSmall.pascalCase()}}Dto>>> get{{ItemSmall.pascalCase()}}ItemsFromUser(int userId);

  Future<Either<Failure, {{ItemSmall.pascalCase()}}Entity>> update{{ItemSmall.pascalCase()}}({{ItemSmall.pascalCase()}}Entity {{ItemSmall.camelCase()}});

  Future<Either<Failure, int>> delete{{ItemSmall.pascalCase()}}(int {{ItemSmall.camelCase()}}Id);

  Future<Either<Failure, IdSet>> delete{{ItemSmall.pascalCase()}}Items(IdSet {{ItemSmall.camelCase()}}Ids);

  // User operations related to {{ItemSmall.camelCase()}}s
  Future<Either<Failure, {{ItemSmall.pascalCase()}}UserLinkEntity>> add{{ItemSmall.pascalCase()}}UserLink({{ItemSmall.pascalCase()}}UserLinkEntity {{ItemSmall.camelCase()}}UserEntity);

  Future<Either<Failure, OrganizerItems<UserEntity>>> getUserItemsBy{{ItemSmall.pascalCase()}}Id(int {{ItemSmall.camelCase()}}Id);

  Future<Either<Failure, {{ItemSmall.pascalCase()}}UserLinkEntity>> update{{ItemSmall.pascalCase()}}UserLink({{ItemSmall.pascalCase()}}UserLinkEntity {{ItemSmall.camelCase()}});

  Future<Either<Failure, OrganizerItems<UserEntity>>> update{{ItemSmall.pascalCase()}}UserLinks(ItemLinkIdsParams params);
}
