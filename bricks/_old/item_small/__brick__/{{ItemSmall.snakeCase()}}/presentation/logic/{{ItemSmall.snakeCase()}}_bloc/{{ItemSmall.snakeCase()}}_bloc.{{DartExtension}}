import 'package:fo_fe/core/external_exports.dart';
import 'package:fo_fe/core/external_presentation_exports.dart';
import 'package:fo_fe/features/organizer/all_items/{{ItemSmall.snakeCase()}}/utils/{{ItemSmall.snakeCase()}}_exports.dart';
import 'package:fo_fe/features/organizer/utils/organizer_exports.dart';

part '{{ItemSmall.snakeCase()}}_bloc_event.dart';
part '{{ItemSmall.snakeCase()}}_bloc_state.dart';

class {{ItemSmall.pascalCase()}}Bloc extends OrganizerBloc<{{ItemSmall.pascalCase()}}Dto> {
  final {{ItemSmall.pascalCase()}}UpdateUseCase update{{ItemSmall.pascalCase()}}UseCase;

  {{ItemSmall.pascalCase()}}Bloc(
    this.update{{ItemSmall.pascalCase()}}UseCase,
  ) : super(
          addItem: GetIt.instance.get<{{ItemSmall.pascalCase()}}AddUseCase>().call,
          getItems: GetIt.instance.get<{{ItemSmall.pascalCase()}}GetItemsFromUserUseCase>().call,
          deleteItems: GetIt.instance.get<{{ItemSmall.pascalCase()}}DeleteUseCase>().call,
        ) {
    setupEventHandlers();
    on<{{ItemSmall.pascalCase()}}UpdateBlocEvent<{{ItemSmall.pascalCase()}}Params>>(_onUpdate{{ItemSmall.pascalCase()}});
  }

  Future<void> _onUpdate{{ItemSmall.pascalCase()}}(
      {{ItemSmall.pascalCase()}}UpdateBlocEvent<{{ItemSmall.pascalCase()}}Params> event, Emitter<OrganizerBlocState<{{ItemSmall.pascalCase()}}Dto>> emit) async {
    await handleEvent(
      emit: emit,
      action: () => update{{ItemSmall.pascalCase()}}UseCase(event.params),
      originalItems: (updated{{ItemSmall.pascalCase()}}) => state.originalItems.copyWithUpdatedItem(updated{{ItemSmall.pascalCase()}}),
      displayedItems: (updated{{ItemSmall.pascalCase()}}) => state.displayedItems.copyWithUpdatedItem(updated{{ItemSmall.pascalCase()}}),
    );
  }
}
