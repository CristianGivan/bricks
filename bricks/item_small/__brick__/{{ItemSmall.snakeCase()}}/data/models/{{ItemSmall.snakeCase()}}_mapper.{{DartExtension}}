import 'package:fo_fe/core/db/drift/organizer_drift_exports.dart';
import 'package:fo_fe/features/organizer/all_items/{{ItemSmall.snakeCase()}}/utils/{{ItemSmall.snakeCase()}}_exports.dart';

class {{ItemSmall.pascalCase()}}Mapper {
  static {{ItemSmall.pascalCase()}}Entity entityFromTableDrift({{ItemSmall.pascalCase()}}TableDriftG tableDrift) {
    return {{ItemSmall.pascalCase()}}Entity(
      id: tableDrift.id,
      subject: tableDrift.subject,
      createdDate: tableDrift.createdDate,
      creatorId: tableDrift.creatorId,
      remoteId: tableDrift.remoteId,
      lastUpdate: tableDrift.lastUpdate,
      lastViewedDate: tableDrift.lastViewedDate,
      remoteViews: tableDrift.remoteViews,
      views: tableDrift.views,
      checksum: tableDrift.checksum,
    );
  }

  static OrganizerItems<{{ItemSmall.pascalCase()}}Entity> entityItemsFromTableDriftItems(List<{{ItemSmall.pascalCase()}}TableDriftG> items) {
    return OrganizerItems.of(items.map(entityFromTableDrift).toList());
  }

  static {{ItemSmall.pascalCase()}}TableDriftCompanion tableDriftCompanionFromEntity({{ItemSmall.pascalCase()}}Entity entity) {
    return {{ItemSmall.pascalCase()}}TableDriftCompanion(
      id: entity.id == 0 ? const Value.absent() : Value(entity.id),
      subject: Value(entity.subject),
      createdDate: Value(entity.createdDate),
      creatorId: Value(entity.creatorId),
      remoteId: Value(entity.remoteId),
      lastUpdate: Value(entity.lastUpdate),
      lastViewedDate: Value(entity.lastViewedDate),
      remoteViews: Value(entity.remoteViews),
      views: Value(entity.views),
      checksum: Value(entity.checksum),
    );
  }

  static OrganizerItems<{{ItemSmall.pascalCase()}}Dto> itemsFromRows(List<QueryRow> rows) {
    final items = rows.map((row) {
      return {{ItemSmall.pascalCase()}}Dto(
        {{ItemSmall.camelCase()}}: {{ItemSmall.camelCase()}}EntityFromRow(row),
        {{ItemSmall.camelCase()}}UserLink: {{ItemSmall.pascalCase()}}UserLinkMapper.{{ItemSmall.camelCase()}}UserEntityFromRow(row),
      );
    }).toList();
    return OrganizerItems.of(items);
  }

  static OrganizerItems<{{ItemSmall.pascalCase()}}Entity> entitiesFromRows(List<QueryRow> rows) {
    final items = rows.map({{ItemSmall.camelCase()}}EntityFromRow).toList();
    return OrganizerItems.of(items);
  }

  static {{ItemSmall.pascalCase()}}Entity {{ItemSmall.camelCase()}}EntityFromRow(QueryRow row) {
    return {{ItemSmall.pascalCase()}}Entity(
      id: row.read<int>('{{ItemSmall.snakeCase()}}_id'),
      subject: row.read<String>('subject'),
      createdDate: row.read<DateTime>('created_date'),
      creatorId: row.read<int>('creator_id'),
      remoteId: row.read<int>('remote_id'),
      lastUpdate: row.read<DateTime>('last_update'),
      lastViewedDate: row.read<DateTime>('last_viewed_date'),
      remoteViews: row.read<int>('remote_views'),
      views: row.read<int>('views'),
      checksum: row.read<String>('checksum'),
    );
  }
}
