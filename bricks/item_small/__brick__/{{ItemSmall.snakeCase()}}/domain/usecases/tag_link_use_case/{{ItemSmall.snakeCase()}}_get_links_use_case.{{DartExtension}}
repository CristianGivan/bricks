import 'package:dartz/dartz.dart';
import 'package:fo_fe/core/error/failures.dart';
import 'package:fo_fe/core/usecase/usecase.dart';
import 'package:fo_fe/features/organizer/all_items/tag/domain/repositories/tag_repository.dart';
import 'package:fo_fe/features/organizer/all_items/user/utils/user_exports.dart';
import 'package:fo_fe/features/organizer/utils/organizer_exports.dart';

typedef {{ItemSmall.pascalCase()}}GetLink<T extends ItemEntity> = Future<Either<Failure, OrganizerItems<T>>> Function(
    ItemLinkParams params);

class {{ItemSmall.pascalCase()}}GetLinksUseCase<T extends ItemEntity> extends UseCase<OrganizerItems<T>, ItemLinkParams> {
  final {{ItemSmall.pascalCase()}}Repository repository;

  {{ItemSmall.pascalCase()}}GetLinksUseCase(this.repository);

  @override
  Future<Either<Failure, OrganizerItems<T>>> call(ItemLinkParams params) {
    final get{{ItemSmall.pascalCase()}}Link = _typeToGet{{ItemSmall.pascalCase()}}LinkMap[T];

    if (get{{ItemSmall.pascalCase()}}Link == null) {
      return Future.value(Left(UnexpectedFailure("No handler found for type $T")));
    }

    return get{{ItemSmall.pascalCase()}}Link(params).then((result) => result.map((items) => items as OrganizerItems<T>));
  }

  Map<Type, {{ItemSmall.pascalCase()}}GetLink<ItemEntity>> get _typeToGet{{ItemSmall.pascalCase()}}LinkMap => {
        UserEntity: (params) => repository.getUserItemsBy{{ItemSmall.pascalCase()}}Id(params.itemId),
      };
}
